generator client {
    provider = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider   = "postgresql"
    url        = env("DATABASE_URL")
    extensions = [pgvector]
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
    accounts      Account[]
    sessions      Session[]
    documents     Document[]
    rags          Rag[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model DocumentChunk {
  id         String   @id @default(uuid())
  content    String
  embedding  Unsupported("vector(1536)")? // For openAI embeddings
  document   Document @relation(fields: [documentId], references: [id])
  documentId String
}

model Document {
    id        String          @id @default(uuid())
    title     String
    userId    String
    user      User            @relation(fields: [userId], references: [id])
    chunks    DocumentChunk[]
    createdAt DateTime        @default(now())
}

model Rag {
  id          String   @id @default(uuid())
  name        String
  description String?
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  dataSource  String // (file, text, url, etc.)
  sourcePath  String?
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
